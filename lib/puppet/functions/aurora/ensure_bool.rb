# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# ensure_bool.rb
#

# ---- original file header ----
#
# @summary
#       Converts a string with correct boolean value to a boolean type. Converts the values:
#      'false' to false
#      'true' to true
#    Requires a single boolean or string as an input.
#
#
Puppet::Functions.create_function(:'aurora::ensure_bool') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    
    fail(Puppet::ParseError, 'ensure_bool(): Wrong number of arguments ' \
      "given (#{arguments.size} for 1)") if arguments.size != 1

    string = arguments[0]

    # If string is already Boolean, return it
    return string if !!string == string

    unless string.is_a?(String)
      fail(Puppet::ParseError, 'ensure_bool(): Requires String or Boolean as input')
    end

    result = case string
      # The following  cases convert a string with value 'true' to be boolean with value true, and
      # convert a string with value'false' to be boolean with value false

      # An empty string should return an error
      when /^$/, '' then fail(Puppet::ParseError, 'ensure_bool(): an empty string is not a valid boolean')
      when /^(true)$/  then true
      when /^(false)$/  then false

      when /^(undef|undefined)$/ then fail(Puppet::ParseError, 'ensure_bool(): Undefined argument given')
      else
        fail(Puppet::ParseError, 'ensure_bool(): Unknown type of boolean given')
    end

    return result
  
  end
end
